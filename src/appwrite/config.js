import { Client, Account, ID, Databases, Storage, Query } from "appwrite";

export class Service {
Â  Â  client = new Client();
Â  Â  databases;
Â  Â  bucket;

Â  Â  constructor() {
Â  Â  Â  Â  this.client
Â  Â  Â  Â  Â  Â  .setEndpoint(import.meta.env.VITE_APPWRITE_URL)
Â  Â  Â  Â  Â  Â  .setProject(import.meta.env.VITE_APPWRITE_PROJECT_ID)
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  this.databases = new Databases(this.client);
Â  Â  Â  Â  this.bucket = new Storage(this.client);
Â  Â  }

Â  Â  // --- Core Post Operations (Main Collection) ---

Â  Â  // Create Post
Â  Â  async createPost({ title, slug, content, featuredImage, status, userID, companyName, role, batchYear, placementType, tags,dept }) {
Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  Â  return await this.databases.createDocument(
Â  Â  Â  Â  Â  Â  Â  Â  import.meta.env.VITE_APPWRITE_DATABASE_ID,
Â  Â  Â  Â  Â  Â  Â  Â  import.meta.env.VITE_APPWRITE_COLLECTION_ID,
Â  Â  Â  Â  Â  Â  Â  Â  slug,
Â  Â  Â  Â  Â  Â  Â  Â  {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  title,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  content,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  featuredImage,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  status,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  userID,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  companyName,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  role,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  batchYear,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  placementType,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  tags,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  dept
Â  Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  );
Â  Â  Â  Â  } catch (err) {
Â  Â  Â  Â  Â  Â  console.log("CreatePost Error:", err);
Â  Â  Â  Â  Â  Â  throw err; 
Â  Â  Â  Â  }
Â  Â  }

Â  Â  // Update Post
Â  Â  async updatePost(slug, { title, content, featuredImage, status, companyName, role, batchYear, placementType, tags,dept }) {
Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  Â  return await this.databases.updateDocument(
Â  Â  Â  Â  Â  Â  Â  Â  import.meta.env.VITE_APPWRITE_DATABASE_ID,
Â  Â  Â  Â  Â  Â  Â  Â  import.meta.env.VITE_APPWRITE_COLLECTION_ID,
Â  Â  Â  Â  Â  Â  Â  Â  slug,
Â  Â  Â  Â  Â  Â  Â  Â  {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  title,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  content,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  featuredImage,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  status,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  companyName,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  role,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  batchYear,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  placementType,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  tags,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  dept
Â  Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  );
Â  Â  Â  Â  } catch (err) {
Â  Â  Â  Â  Â  Â  console.log("UpdatePost Error:", err);
Â  Â  Â  Â  Â  Â  throw err;
Â  Â  Â  Â  }
Â  Â  }

Â  Â  // Delete Post
Â  Â  async deletePost(slug) {
Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  Â  await this.databases.deleteDocument(
Â  Â  Â  Â  Â  Â  Â  Â  import.meta.env.VITE_APPWRITE_DATABASE_ID,
Â  Â  Â  Â  Â  Â  Â  Â  import.meta.env.VITE_APPWRITE_COLLECTION_ID,
Â  Â  Â  Â  Â  Â  Â  Â  slug
Â  Â  Â  Â  Â  Â  );
Â  Â  Â  Â  Â  Â  return true;
Â  Â  Â  Â  } catch (err) {
Â  Â  Â  Â  Â  Â  console.log("DeletePost Error:", err);
Â  Â  Â  Â  Â  Â  return false;
Â  Â  Â  Â  }
Â  Â  }

Â  Â  // Get Single Post
Â  Â  async getPost(slug) {
Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  Â  return await this.databases.getDocument(
Â  Â  Â  Â  Â  Â  Â  Â  import.meta.env.VITE_APPWRITE_DATABASE_ID,
Â  Â  Â  Â  Â  Â  Â  Â  import.meta.env.VITE_APPWRITE_COLLECTION_ID,
Â  Â  Â  Â  Â  Â  Â  Â  slug
Â  Â  Â  Â  Â  Â  );
Â  Â  Â  Â  } catch (err) {
Â  Â  Â  Â  Â  Â  console.log("GetPost Error:", err);
Â  Â  Â  Â  Â  Â  return null;
Â  Â  Â  Â  }
Â  Â  }

Â  Â  // Get Multiple Posts
Â  Â  async getPosts(queries = [Query.equal("status", "active")]) {
Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  Â  return await this.databases.listDocuments(
Â  Â  Â  Â  Â  Â  Â  Â  import.meta.env.VITE_APPWRITE_DATABASE_ID,
Â  Â  Â  Â  Â  Â  Â  Â  import.meta.env.VITE_APPWRITE_COLLECTION_ID,
Â  Â  Â  Â  Â  Â  Â  Â  queries
Â  Â  Â  Â  Â  Â  );
Â  Â  Â  Â  } catch (err) {
Â  Â  Â  Â  Â  Â  console.log("GetPosts Error:", err);
Â  Â  Â  Â  Â  Â  return false;
Â  Â  Â  Â  }
Â  Â  }

Â  Â  // --- Detailed Content Operations (Secondary Collection) ---
    // ... (omitted for brevity, assume correct)

Â  Â  // --- File Storage Operations ---

Â  Â  // Upload File
Â  Â  async uploadFile(file) {
Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  Â  return await this.bucket.createFile(
Â  Â  Â  Â  Â  Â  Â  Â  import.meta.env.VITE_APPWRITE_BUCKET_ID,
Â  Â  Â  Â  Â  Â  Â  Â  ID.unique(),
Â  Â  Â  Â  Â  Â  Â  Â  file
Â  Â  Â  Â  Â  Â  );
Â  Â  Â  Â  } catch (err) {
Â  Â  Â  Â  Â  Â  console.log("UploadFile Error:", err);
Â  Â  Â  Â  Â  Â  return false;
Â  Â  Â  Â  }
Â  Â  }

Â  Â  // Delete File
Â  Â  async deleteFile(fileId) {
Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  Â  await this.bucket.deleteFile(
Â  Â  Â  Â  Â  Â  Â  Â  import.meta.env.VITE_APPWRITE_BUCKET_ID,
Â  Â  Â  Â  Â  Â  Â  Â  fileId
Â  Â  Â  Â  Â  Â  );
Â  Â  Â  Â  Â  Â  return true;
Â  Â  Â  Â  } catch (err) {
Â  Â  Â  Â  Â  Â  console.log("DeleteFile Error:", err);
Â  Â  Â  Â  Â  Â  return false;
Â  Â  Â  Â  }
Â  Â  }

Â  Â  // File Preview
Â  Â  getFilePreview(fileId) {
Â  Â  Â  Â  // ðŸ’¡ FIX: Return the full, explicitly generated URL string
        if (!fileId) return null;
Â  Â  Â  Â  return this.bucket.getFilePreview(
Â  Â  Â  Â  Â  Â  import.meta.env.VITE_APPWRITE_BUCKET_ID,
Â  Â  Â  Â  Â  Â  fileId
Â  Â  Â  Â  ).toString(); // ðŸŽ¯ Changed to explicitly return the string URL
Â  Â  }
}

const service = new Service();
export default service;
